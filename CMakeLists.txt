cmake_minimum_required(VERSION 2.8)
project(mandelbrot C)

set(CONFIG_WARNING "/*DO NOT EDIT THIS FILE IT WILL BE OVERWRITTEN\n* EDIT config.cmake INSTEAD!*/")

# This file contains main project compile time options.
# Edit this file to customize the build
include(mdb/config/config.cmake)

configure_file(mdb/config/config.h.in ${CMAKE_CURRENT_SOURCE_DIR}/mdb/config/config.h @ONLY)

set(CMAKE_VERBOSE_MAKEFILE Off)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99 -D_GNU_SOURCE -fPIC -fvisibility=hidden -march=native -Wall -Wextra -Wno-unused-function -Werror=declaration-after-statement")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG -g -Og")
#set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=leak")
#set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=undefined")
#set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=address")
#set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fsanitize=thread")

set(CFLAGS_RELEASE "-O3 -DNDEBUG -s -ffast-math -funroll-loops -ftree-vectorize")

#LTO works not properly on MinGW.
if(!WIN32)
    set(CFLAGS_RELEASE "${CFLAGS_RELEASE} -flto")
endif()


set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${CFLAGS_RELEASE}")

set(CMAKE_C_FLAGS_RELWITHDEBINFO  "${CMAKE_C_FLAGS_RELWITHDEBINFO} -O3 -DNDEBUG -g -flto -ffast-math -funroll-loops -ftree-vectorize")

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

set(SOURCE_FILES
        mdb/main.c
        mdb/config/config.h
        mdb/sched/rsched.c
        mdb/sched/rsched.h
        mdb/tools/args_parser.c
        mdb/tools/args_parser.h
        mdb/tools/compiler.h
        mdb/tools/log.c
        mdb/tools/log.h
        mdb/tools/atomic.h
        mdb/tools/timer.h
        mdb/tools/image_hdr.c
        mdb/tools/image_hdr.h
        mdb/app/benchmark.c
        mdb/app/benchmark.h
        mdb/app/render.c
        mdb/app/render.h
        mdb/kernel/mdb_kernel.c
        mdb/kernel/mdb_kernel.h
        mdb/kernel/mdb_kernel_meta.h
        mdb/kernel/mdb_kernel_event.h
        mdb/tools/cpu_features.c
        mdb/tools/cpu_features.h
        mdb/surface/surface.c
        mdb/surface/surface.h
        mdb/tools/error_codes.h
        mdb/tools/hist.c
        mdb/tools/hist.h
        mdb/sched/rsched_queue.c
        mdb/sched/rsched_queue.h
        mdb/sched/rsched_worker.c
        mdb/sched/rsched_worker.h
        mdb/sched/rsched_common.h
        mdb/sched/rsched_profile.c
        mdb/sched/rsched_profile.h
        mdb/arch/mem.h
        mdb/arch/nproc.c
        mdb/arch/nproc.h
        )


if(CONFIG_OGL_RENDER)

    if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
        include_directories(mdb/render/glad_debug/include/)
        list(APPEND SOURCE_FILES mdb/render/glad_debug/src/glad.c)
    elseif(${CMAKE_BUILD_TYPE} STREQUAL Release)
        include_directories(mdb/render/glad_release/include/)
        list(APPEND SOURCE_FILES mdb/render/glad_release/src/glad.c)
    elseif(${CMAKE_BUILD_TYPE} STREQUAL RelWithDebInfo)
        include_directories(mdb/render/glad_release/include/)
        list(APPEND SOURCE_FILES mdb/render/glad_release/src/glad.c)
    endif ()

    list(APPEND SOURCE_FILES
            mdb/render/ogl_render.c
            mdb/render/ogl_render.h
            mdb/render/ogl_shader.c
            mdb/render/ogl_shader.h
            mdb/render/ogl_pixel_buffer.c
            mdb/render/ogl_pixel_buffer.h
            mdb/render/ogl_squad.c
            mdb/render/ogl_squad.h
            mdb/render/ogl_buffer_sync.c
            mdb/render/ogl_buffer_sync.h
            )
endif()

add_executable(mdb ${SOURCE_FILES})
target_link_libraries(mdb pthread dl m)

if(CONFIG_OGL_RENDER)
    target_link_libraries(mdb glfw3)

    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/shaders)
    add_custom_command(
            TARGET mdb POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_SOURCE_DIR}/mdb/render/shaders
            ${CMAKE_CURRENT_BINARY_DIR}/shaders)
endif()



add_subdirectory(mdb/kernel_modules ${CMAKE_CURRENT_BINARY_DIR}/modules)
